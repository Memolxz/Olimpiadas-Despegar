generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  SALES_AGENT
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProductType {
  FLIGHT
  ACCOMMODATION
  TRANSFER
  EXCURSION
  INSURANCE
  ASSISTANCE
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  INSTALLMENTS
  MERCADO_PAGO
  PAYPAL
  CASH
}

// Modelo de Usuario adaptado para el portal turístico
model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  country     String
  phone       String?
  
  // Datos adicionales para compras
  documentNumber String?  // DNI/Pasaporte
  address        String?
  city           String?
  postalCode     String?
  birthDate      DateTime?
  
  role       UserRole @default(CLIENT)
  
  // Relaciones
  sessions   Session[]
  orders     Order[]
  cartItems  CartItem[]
  preferences UserPreference[]
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@map("users")
}

// Sesiones para autenticación
model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Modelo de Producto base
model Product {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  type         ProductType
  basePrice    Decimal     @db.Decimal(10, 2)
  currency     String      @default("USD")
  available    Boolean     @default(true)
  providerId   Int?
  
  // Campos específicos por tipo (JSON para flexibilidad)
  specificData Json? // Fechas de vuelo, estrellas de hotel, etc.
  
  // Relaciones
  provider     Provider?   @relation(fields: [providerId], references: [id])
  packageItems PackageItem[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?

  @@map("products")
}

// Paquetes prearmados o personalizados
model Package {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  totalPrice  Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  available   Boolean  @default(true)
  isCustom    Boolean  @default(false)
  
  // Relaciones
  items       PackageItem[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("packages")
}

// Items que componen un paquete
model PackageItem {
  id        Int     @id @default(autoincrement())
  packageId Int
  productId Int
  quantity  Int     @default(1)
  
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("package_items")
}

// Carrito de compras
model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int?
  packageId Int?
  quantity  Int      @default(1)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
  package   Package? @relation(fields: [packageId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

// Órdenes/Pedidos
model Order {
  id            Int           @id @default(autoincrement())
  orderNumber   String        @unique
  userId        Int
  status        OrderStatus   @default(PENDING)
  totalAmount   Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  
  // Información de facturación
  billingInfo   Json?
  
  // Notas internas
  internalNotes String?
  
  user          User          @relation(fields: [userId], references: [id])
  items         OrderItem[]
  payments      Payment[]
  notifications Notification[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("orders")
}

// Items de una orden
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int?
  packageId Int?
  quantity  Int      @default(1)
  unitPrice Decimal  @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
  package   Package? @relation(fields: [packageId], references: [id])

  @@map("order_items")
}

// Pagos
model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  method        PaymentMethod
  status        String        @default("pending")
  
  // Datos específicos del método de pago
  paymentData   Json?
  
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

// Proveedores de servicios
model Provider {
  id          Int       @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  address     String?
  website     String?
  
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("providers")
}

// Preferencias de usuario
model UserPreference {
  id     Int    @id @default(autoincrement())
  userId Int
  key    String
  value  String
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
  @@map("user_preferences")
}

// Notificaciones
model Notification {
  id      Int     @id @default(autoincrement())
  orderId Int?
  type    String  // email, sms, push
  subject String?
  content String
  sent    Boolean @default(false)
  
  order   Order?  @relation(fields: [orderId], references: [id])
  
  createdAt DateTime @default(now())
  sentAt    DateTime?

  @@map("notifications")
}

// Cupones y descuentos
model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  description String?
  discountType String  // percentage, fixed_amount
  discountValue Decimal @db.Decimal(10, 2)
  minAmount   Decimal? @db.Decimal(10, 2)
  maxUses     Int?
  currentUses Int      @default(0)
  validFrom   DateTime
  validUntil  DateTime
  active      Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupons")
}
