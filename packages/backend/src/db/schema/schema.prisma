generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Modelo de Usuario adaptado para el portal turístico
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          String    @default("CLIENT") // "CLIENT", "SALES_AGENT", "ADMIN"
  country       String
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  orders        Order[]
  cart          Cart?
  wishlist      Wishlist?
  notifications Notification[]
  sessions      Session[]
  preferences   UserPreference[]

  @@map("users")
}

// Sesiones para autenticación
model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Modelo de Producto base
model Product {
  id            String    @id @default(uuid())
  name          String
  description   String
  type          String    // "FLIGHT", "ACCOMMODATION", "TRANSFER", "EXCURSION", "INSURANCE", "ASSISTANCE"
  price         Float
  currency      String    @default("USD")
  available     Boolean   @default(true)
  providerId    String?
  specificData  String?   // JSON stored as string
  
  // Relaciones
  provider      Provider?   @relation(fields: [providerId], references: [id])
  packageItems  PackageItem[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  @@map("products")
}

// Paquetes prearmados o personalizados
model Package {
  id          String    @id @default(uuid())
  name        String
  description String?
  totalPrice  Float
  currency    String    @default("USD")
  available   Boolean   @default(true)
  isCustom    Boolean   @default(false)
  
  // Relaciones
  items       PackageItem[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  @@map("packages")
}

// Items que componen un paquete
model PackageItem {
  id        String    @id @default(uuid())
  packageId String
  productId String
  quantity  Int         @default(1)
  
  package   Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  product   Product     @relation(fields: [productId], references: [id])
  
  @@map("package_items")
}

// Carrito de compras
model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Carrito de compras
model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart        @relation(fields: [cartId], references: [id])
  product   Product     @relation(fields: [productId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// Órdenes/Pedidos
model Order {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  userId        String
  status        String      @default("PENDING") // "PENDING", "CONFIRMED", "PAID", "IN_PROGRESS", "COMPLETED", "CANCELLED"
  totalAmount   Float
  currency      String      @default("USD")
  billingInfo   String      // JSON stored as string
  internalNotes String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  user          User          @relation(fields: [userId], references: [id])
  items         OrderItem[]
  payment       Payment?

  @@map("orders")
}

// Items de una orden
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order       @relation(fields: [orderId], references: [id])
  product   Product     @relation(fields: [productId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// Pagos
model Payment {
  id             String   @id @default(uuid())
  orderId        String   @unique
  amount         Float
  currency       String   @default("USD")
  method         String   // "CREDIT_CARD", "DEBIT_CARD", "BANK_TRANSFER", "INSTALLMENTS", "MERCADO_PAGO", "PAYPAL", "CASH"
  status         String   @default("PENDING") // "PENDING", "COMPLETED", "CANCELLED", "REFUNDED", "FAILED"
  paymentDetails String?  // JSON stored as string
  refundReason   String?
  order          Order       @relation(fields: [orderId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

// Proveedores de servicios
model Provider {
  id          String    @id @default(uuid())
  name        String
  email       String?
  phone       String?
  address     String?
  website     String?
  
  products    Product[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  @@map("providers")
}

// Preferencias de usuario
model UserPreference {
  id     String    @id @default(uuid())
  userId String
  key    String
  value  String
  
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
  @@map("user_preferences")
}

// Notificaciones
model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Cupones y descuentos
model Coupon {
  id            String    @id @default(uuid())
  code          String    @unique
  description   String?
  discountType  String    // percentage, fixed_amount
  discountValue Float
  minAmount     Float?
  maxUses       Int?
  currentUses   Int       @default(0)
  validFrom     DateTime
  validUntil    DateTime
  active        Boolean   @default(true)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("coupons")
}

// Configuración de emails
model EmailConfig {
  id              String    @id @default(uuid())
  type            String    @unique
  recipientEmails String
  subject         String
  template        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("email_configs")
}

// Lista de deseos
model Wishlist {
  id        String         @id @default(uuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("wishlists")
}

// Items de la lista de deseos
model WishlistItem {
  id         String    @id @default(uuid())
  wishlistId String
  productId  String
  wishlist   Wishlist  @relation(fields: [wishlistId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("wishlist_items")
}
